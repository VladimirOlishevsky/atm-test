{"version":3,"sources":["components/pages/App/styles.ts","store/AtmStore/index.tsx","store/UserStore/index.tsx","store/RootStore/index.ts","components/elements/AtmTitle/styles.ts","components/elements/AtmTitle/index.tsx","components/elements/Balances/styles.ts","components/elements/Balances/index.tsx","components/elements/ButtonGroup/styles.ts","components/elements/ButtonGroup/index.tsx","components/elements/Card/styles.ts","components/elements/Card/index.tsx","components/pages/App/index.tsx","constants.ts","index.tsx"],"names":["getStyles","makeStyles","app","color","padding","textAlign","backgroundColor","minHeight","display","flexDirection","alignItems","fontSize","gap","input","width","borderBottomColor","atmService","buttonGroup","container","paddingBottom","AtmStore","atmInitValue","Map","tooltip","setAtmBalance","key","value","set","get","writeOffAtmBalance","valueFromBalance","setTooltip","resetTooltip","checkFunction","checkValue","balanceKeys","balance","differenceForCheck","forEach","el","notesHave","notesNeed","Math","floor","minNotesNeed","min","setToAllBalances","inputValue","setInputValue","getRootStore","userStore","setUserBalance","userBalanceKeys","difference","atmOperations","diff","atmCell","atmBalanceKeys","writeOffFromAllBalances","userBalance","userInitValue","writeOffUserBalance","atmBalance","difference1","initValue","type","resultCheckAtm","resultCheckUser","atmUserOperations","initBalanceKeys","resCheck","makeAutoObservable","this","sum","Array","from","keys","map","UserStore","sort","a","b","rootStore","atmStore","root","button","AtmTitle","observer","enterCard","classes","className","onClick","justifyContent","notes","Balances","arrayFromAtmBalance","arrayFromUserBalance","balanceConfig","title","ButtonGroup","buttonConfig","card","borderRadius","height","boxSizing","Card","openAtmField","setOpenAtmField","setEnteredCard","pincode","setPincode","checkPincode","Tooltip","placement","arrow","open","TextField","autoFocus","disabled","onChange","e","currentTarget","style","App","useState","enteredCard","personalAction","Number","buttonsConfig","Typography","filter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07990d2a.chunk.js","sourcesContent":["import {\n    makeStyles,\n} from '@material-ui/core';\n\n\nexport const getStyles = makeStyles(() => ({\n    app: {\n        color: 'rgba(245,245,220,0.7)',\n        padding: '100px 0px 100px',\n        textAlign: 'center',\n        backgroundColor: '#282c34',\n        minHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        fontSize: 'calc(10px + 2vmin)',\n        gap: 50\n    },\n    input: {\n        width: 250,\n        '& .MuiInputLabel-root': {\n            color: \"beige\"\n          },\n        '& .MuiInputBase-input': {\n            color: 'beige',\n        },\n        '& .MuiInput-underline:before': {\n            borderBottomColor: '#fff8',\n        },\n        '& .MuiInput-underline:hover:before': {\n            borderBottomColor: '#fff',\n        },\n        '& .MuiInput-underline:after': {\n            borderBottomColor: '#fff',\n        },\n    },\n    atmService: {\n        display: 'flex', \n        flexDirection: 'column', \n        gap: 40\n    },\n    buttonGroup: {\n        display: 'flex', \n        gap: 32\n    },\n    container: {\n        width: '50%',\n        paddingBottom: 100\n    }\n}));","import {\n  makeAutoObservable\n} from 'mobx';\nimport { INotes, Operation } from 'src/constants';\nimport { getRootStore } from '..';\n\nexport class AtmStore {\n\n  atmInitValue = new Map([\n    [5000, 4],\n    [2000, 6],\n    [1000, 9],\n    [500, 8],\n    [200, 2],\n    [100, 5]\n  ]);\n\n  tooltip = '';\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  setAtmBalance = (key: number, value: number) => {\n    this.atmInitValue.set(key, (this.atmInitValue.get(key) || 0) + value)\n  }\n\n  writeOffAtmBalance = (key: number, value: number) => {\n    this.atmInitValue.set(key, (this.atmInitValue.get(key) || 0) - value)\n  }\n\n  valueFromBalance = (value: number) => {\n    return this.atmInitValue.get(value)\n  }\n\n  get atmBalance(): number {\n    let sum = 0;\n    this.atmInitValue.forEach((key, value) => sum += key * value)\n    return sum\n  }\n\n  get atmBalanceKeys(): number[] {\n    return Array.from(this.atmInitValue.keys())\n  }\n\n  get arrayFromAtmBalance(): INotes[] {\n    const arr = this.atmBalanceKeys.map(el => ({\n      type: el,\n      value: this.atmInitValue.get(el)\n    }))\n    return arr\n  }\n\n  setTooltip = (value: string) => {\n    this.tooltip = value;\n  }\n\n  resetTooltip = () => {\n    this.tooltip = '';\n  }\n\n  checkFunction = (checkValue: number, balanceKeys: number[], balance: Map<number, number>) => {\n    let differenceForCheck = checkValue;\n    balanceKeys.forEach(el => {\n      let notesHave = balance.get(el) || 0;\n      let notesNeed = Math.floor(differenceForCheck / el);\n      let minNotesNeed = Math.min(notesHave, notesNeed);\n\n      if (notesHave && minNotesNeed) {\n        if (notesHave >= minNotesNeed) {\n          differenceForCheck = differenceForCheck - minNotesNeed * el\n          return differenceForCheck\n        } else {\n          return\n        }\n      }\n    })\n    return differenceForCheck\n  }\n\n  setToAllBalances = (inputValue: number, setInputValue: React.Dispatch<React.SetStateAction<string>>) => {\n    const {\n      userStore: { setUserBalance, userBalanceKeys }\n    } = getRootStore();\n\n    let difference = inputValue;\n    const atmOperations = (diff: number, atmCell: number) => {\n      let notesNeed = Math.floor(diff / atmCell);\n\n      if (notesNeed) {\n        setUserBalance(atmCell, notesNeed);\n        this.setAtmBalance(atmCell, notesNeed)\n      } else {\n        return\n      }\n      difference = diff - notesNeed * atmCell\n      return difference\n    }\n\n    for (let el of this.atmBalanceKeys) {\n      let res = atmOperations(difference, el)\n      if (res) {\n        atmOperations(difference, el)\n      }\n    }\n\n    for (let el of userBalanceKeys) {\n      let res = atmOperations(difference, el)\n      if (res) {\n        atmOperations(difference, el)\n      }\n    }\n    setInputValue('');\n    this.resetTooltip();\n  }\n\n  writeOffFromAllBalances = (inputValue: number, setInputValue: React.Dispatch<React.SetStateAction<string>>) => {\n    const {\n      userStore: { userBalance, userInitValue, writeOffUserBalance, userBalanceKeys }\n    } = getRootStore();\n\n    if (inputValue > userBalance) {\n      this.setTooltip('Операция не может быть выполнена. На вашем балансе недостаточно средств')\n      return\n    } else if (inputValue > this.atmBalance) {\n      this.setTooltip('Операция не может быть выполнена. В банкомате нет достаточной суммы')\n      return\n    }\n\n    let difference = inputValue;\n    let difference1 = inputValue;\n    const atmOperations = (initValue: Map<number, number>, diff: number, atmCell: number, type: string) => {\n      let notesHave = initValue.get(atmCell) || 0;\n      let notesNeed = Math.floor(diff / atmCell);\n      let minNotesNeed = Math.min(notesHave, notesNeed);\n\n      if (notesHave && minNotesNeed) {\n        if (notesHave >= minNotesNeed) {\n          type === 'atm' && this.writeOffAtmBalance(atmCell, minNotesNeed)\n          type === 'user' && writeOffUserBalance(atmCell, minNotesNeed)\n        } else {\n          return\n        }\n      }\n      if (type === 'atm') {\n        difference = diff - minNotesNeed * atmCell\n        return difference\n      }\n      if (type === 'user') {\n        difference1 = diff - minNotesNeed * atmCell\n        return difference1\n      }\n    }\n\n    const resultCheckAtm = this.checkFunction(inputValue, this.atmBalanceKeys, this.atmInitValue);\n    const resultCheckUser = this.checkFunction(inputValue, userBalanceKeys, userInitValue);\n\n    for (let el of this.atmBalanceKeys) {\n      if (!resultCheckAtm && !resultCheckUser) {\n        let res = atmOperations(this.atmInitValue, difference, el, 'atm')\n        if (res) {\n          atmOperations(this.atmInitValue, difference, el, 'atm')\n        }\n      } else {\n        if (resultCheckAtm) {\n          this.setTooltip('Операция не может быть выполнена. В банкомате нет необходимых купюр');\n          return\n        }\n        if (resultCheckUser) {\n          this.setTooltip('Операция не может быть выполнена. У пользователя нет необходимых купюр')\n          return\n        }\n      }\n    }\n\n    for (let el of userBalanceKeys) {\n      let res = atmOperations(userInitValue, difference1, el, 'user')\n      if (res) {\n        atmOperations(userInitValue, difference1, el, 'user')\n      }\n    }\n\n    setInputValue('');\n    this.resetTooltip();\n  }\n\n  atmUserOperations = (type: Operation, inputValue: number, setInputValue: React.Dispatch<React.SetStateAction<string>>) => {\n    const {\n      userStore: { userBalance, userInitValue, setUserBalance, writeOffUserBalance, userBalanceKeys }\n    } = getRootStore();\n\n    if (inputValue > userBalance) {\n      this.setTooltip('Операция не может быть выполнена. На вашем балансе недостаточно средств. Введите другую сумму или верните карту')\n      return\n    } else if (inputValue > this.atmBalance && type === 'getFromAtm') {\n      this.setTooltip('Операция не может быть выполнена. В банкомате нет достаточной суммы. Введите другую сумму или верните карту')\n      return\n    }\n\n    let initValue = type === 'getFromAtm' ? this.atmInitValue : userInitValue;\n    let initBalanceKeys = type === 'getFromAtm' ? this.atmBalanceKeys : userBalanceKeys;\n\n    let difference = inputValue;\n    const atmOperations = (diff: number, atmCell: number) => {\n      let notesHave = initValue.get(atmCell) || 0;\n      let notesNeed = Math.floor(diff / atmCell);\n      let minNotesNeed = Math.min(notesHave, notesNeed);\n\n      if (notesHave && minNotesNeed) {\n        if (notesHave >= minNotesNeed) {\n          if (type === 'getFromAtm') {\n            this.writeOffAtmBalance(atmCell, minNotesNeed)\n            setUserBalance(atmCell, minNotesNeed)\n          }\n          if (type === 'setToAtm') {\n            this.setAtmBalance(atmCell, minNotesNeed)\n            writeOffUserBalance(atmCell, minNotesNeed)\n          }\n        } else {\n          return\n        }\n      }\n      difference = diff - minNotesNeed * atmCell\n      return difference\n    }\n\n    const resCheck = this.checkFunction(inputValue, initBalanceKeys, initValue);\n    for (let el of initBalanceKeys) {\n      if (!resCheck) {\n        let res = atmOperations(difference, el)\n        if (res) {\n          atmOperations(difference, el)\n        } else {\n          setInputValue('');\n          this.resetTooltip();\n          return\n        }\n      } else {\n        if (type === 'setToAtm') {\n          this.setTooltip('Операция не может быть выполнена. У вас нет необходимых купюр. Введите другую сумму или верните карту')\n        }\n        if (type === 'getFromAtm') {\n          this.setTooltip('Операция не может быть выполнена. В банкомате нет необходимых купюр. Введите другую сумму или верните карту')\n        }\n        return\n      }\n    }\n  }\n}\n","import {\n  makeAutoObservable\n} from 'mobx';\nimport { INotes } from 'src/constants';\n\n\nexport class UserStore {\n  userInitValue: Map<number, number> = new Map([\n    [5000, 0],\n    [2000, 1],\n    [1000, 4],\n    [500, 0],\n    [200, 0],\n    [100, 2]\n  ]);\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  setUserBalance = (key: number, value: number) => {\n    this.userInitValue.set(key, (this.userInitValue.get(key) || 0) + value)\n  }\n\n  writeOffUserBalance = (key: number, value: number) => {\n    this.userInitValue.set(key, (this.userInitValue.get(key) || 0) - value)\n  }\n\n  get userBalance(): number {\n    let sum = 0;\n    this.userInitValue.forEach((key, value) => sum += key * value)\n    return sum\n  }\n\n  get userBalanceKeys(): number[] {\n    return Array.from(this.userInitValue.keys()).sort((a, b) => b - a)\n  }\n\n  get arrayFromUserBalance(): INotes[] {\n    const arr = this.userBalanceKeys.map(el => ({\n      type: el,\n      value: this.userInitValue.get(el)\n    }))\n    return arr\n  }\n}\n","import { AtmStore, UserStore } from \"..\";\n\nexport class RootStore {\n  atmStore: AtmStore;\n  userStore: UserStore;\n\n  constructor() {\n    this.atmStore = new AtmStore();\n    this.userStore = new UserStore();\n  }\n}\n\nconst rootStore = new RootStore();\nexport const getRootStore = (): RootStore => rootStore;\n","import { makeStyles } from '@material-ui/core';\n\nexport const getStyles = makeStyles(() => ({\n    root: {\n        display: 'flex', \n        gap: 32, \n        alignItems: 'center', \n    },\n    button: {\n        padding: `8px 32px`\n    },\n}));","import { getStyles } from './styles';\nimport { observer } from 'mobx-react-lite';\n\ninterface IAtmTitle {\n    enterCard: () => void\n}\n\nexport const AtmTitle = observer(({\n    enterCard\n}: IAtmTitle) => {\n    const classes = getStyles();\n    return (\n        <div className={classes.root}>\n            <span>Вставьте карту</span>\n            <button\n                className={classes.button}\n                onClick={() => enterCard()}>\n                ok\n            </button>\n        </div>\n\n    )\n})\n","import { makeStyles } from '@material-ui/core';\n\nexport const getStyles = makeStyles(() => ({\n    root: {\n        display: 'flex', \n        flexDirection: 'row', \n        justifyContent: 'space-between', \n        width: '50%'\n    },\n    notes: {\n        display: 'flex', \n        flexDirection: 'column' \n    },\n    value: {\n        display: 'flex', \n        flexDirection: 'row'\n    }\n}));","import { getStyles } from './styles';\nimport { observer } from 'mobx-react-lite';\nimport { getRootStore } from 'src/store';\n\n\nexport const Balances = observer(() => {\n\n    const {\n        atmStore: { arrayFromAtmBalance },\n        userStore: { arrayFromUserBalance }\n    } = getRootStore();\n    const classes = getStyles();\n\n    const balanceConfig = [\n        {\n            title: 'Atm balance',\n            notes: arrayFromAtmBalance,\n        },\n        {\n            title: 'User balance',\n            notes: arrayFromUserBalance,\n        },\n    ]\n    return (\n        <div className={classes.root}>\n            {balanceConfig.map(el => (\n                <div key={el.title} className={classes.notes}>\n                    <p>{el.title}</p>\n                    {el.notes.map(el => (\n                        <div key={el.type} className={classes.value}>\n                            {el.type}: {el.value}\n                        </div>\n                    ))}\n                </div>\n            ))}\n        </div>\n    )\n})\n","import { makeStyles } from '@material-ui/core';\n\nexport const getStyles = makeStyles(() => ({\n    buttonGroup: {\n        display: 'flex', \n        gap: 32\n    },\n}));","import { getStyles } from './styles';\nimport { observer } from 'mobx-react-lite';\n\ninterface IButton {\n    title: string;\n    onClick: () => void;\n}\n\ninterface IButtonGroup {\n    buttonConfig: IButton[]\n}\n\nexport const ButtonGroup = observer(({\n    buttonConfig\n}: IButtonGroup) => {\n    const classes = getStyles();\n    return (\n        <div className={classes.buttonGroup}>\n            {buttonConfig.map(el => (\n                <button key={el.title} onClick={el.onClick}>\n                    {el.title}\n                </button>\n            ))}\n        </div>\n    )\n})\n","import { makeStyles } from '@material-ui/core';\n\nexport const getStyles = makeStyles(() => ({\n    card: {\n        display: 'flex',\n        borderRadius: 32,\n        backgroundColor: '#fff',\n        width: 400,\n        height: 200,\n        color: '#000',\n        flexDirection: 'column',\n        boxSizing: 'border-box',\n        gap: 16,\n        alignItems: 'center',\n        justifyContent: 'center',\n        padding: 32,\n    },\n}));","import React from 'react';\nimport { TextField, Tooltip } from '@material-ui/core';\nimport { getStyles } from './styles';\nimport { observer } from 'mobx-react-lite';\nimport { getRootStore } from 'src/store';\n\ninterface ICard {\n    openAtmField: boolean,\n    setOpenAtmField: React.Dispatch<React.SetStateAction<boolean>>,\n    setEnteredCard: React.Dispatch<React.SetStateAction<boolean>>,\n    pincode: string,\n    setPincode: (value: React.SetStateAction<string>) => void,\n    checkPincode: () => void\n}\n\nexport const Card = observer(({\n    openAtmField,\n    setOpenAtmField,\n    setEnteredCard,\n    pincode,\n    setPincode,\n    checkPincode\n}: ICard) => {\n    const {\n        atmStore: { tooltip, resetTooltip },\n        userStore: { userBalance },\n    } = getRootStore();\n    const classes = getStyles();\n\n    const clickExit = () => {\n        resetTooltip();\n        setOpenAtmField(false);\n        setEnteredCard(false)\n    }\n\n    const onChange = (value: string) => {\n        resetTooltip();\n        setPincode(value)\n    }\n    return (\n        <div className={classes.card}>\n            {openAtmField\n                ? null\n                : <>\n                <Tooltip placement=\"top\" title={tooltip} arrow open={tooltip ? true : false}>\n                    <TextField\n                        type='password'\n                        autoFocus\n                        disabled={openAtmField}\n                        value={pincode}\n                        onChange={(e) => onChange(e.currentTarget.value)} />\n                </Tooltip>\n                    \n                    <button\n                        disabled={openAtmField}\n                        onClick={() => checkPincode()}>\n                        ввести пинкод\n                    </button>\n                </>}\n            {openAtmField &&\n                <div style={{ display: 'flex', flexDirection: 'column', gap: 24 }}>\n                    <span>{`Ваш баланс ${userBalance}`} </span>\n                    <button\n                        onClick={() => clickExit()}>\n                        завершить сеанс\n                    </button>\n                </div>}\n        </div>\n    )\n})\n","import React, { useState } from 'react';\nimport { TextField, Typography } from '@material-ui/core';\nimport { getStyles } from './styles';\nimport { observer } from 'mobx-react-lite';\nimport { getRootStore } from 'src/store';\nimport { defaultPincode, Operation } from 'src/constants';\nimport { AtmTitle, Balances, ButtonGroup, Card } from 'src/components';\n\n\nexport const App = observer(() => {\n\n    const [inputValue, setInputValue] = useState('');\n    const [pincode, setPincode] = useState('');\n    const [enteredCard, setEnteredCard] = useState(false);\n    const [openAtmField, setOpenAtmField] = useState(false);\n\n    const classes = getStyles();\n    const {\n        atmStore: { atmUserOperations, setToAllBalances, writeOffFromAllBalances, tooltip, setTooltip, resetTooltip },\n    } = getRootStore();\n\n    const personalAction = (type: Operation) => {\n        atmUserOperations(type, Number(inputValue), setInputValue)\n    }\n    const setToAll = () => {\n        setToAllBalances(Number(inputValue), setInputValue)\n    }\n    const writeOffFromAll = () => {\n        writeOffFromAllBalances(Number(inputValue), setInputValue)\n    }\n    const checkPincode = () => {\n        if (pincode === defaultPincode) {\n            resetTooltip();\n            setPincode('');\n            setInputValue('');\n            setOpenAtmField(true);\n        } else {\n            setTooltip('Неверный пинкод. Попробуйте еще раз')\n        }\n\n    };\n    const enterCard = () => {\n        setEnteredCard(!enteredCard)\n    }\n\n    const buttonsConfig = [\n        {\n            type: 'personal',\n            title: 'Выдать',\n            onClick: () => personalAction('getFromAtm')\n        },\n        {\n            type: 'personal',\n            title: 'Внести',\n            onClick: () => personalAction('setToAtm')\n        },\n        {\n            type: 'all',\n            title: 'Внести на все',\n            onClick: () => setToAll()\n        },\n        {\n            type: 'all',\n            title: 'Списать со всех',\n            onClick: () => writeOffFromAll()\n        },\n    ]\n\n    return (\n        <div className={classes.app}>\n            {!enteredCard && <AtmTitle enterCard={enterCard} />}\n            {enteredCard &&\n                <Card\n                    openAtmField={openAtmField}\n                    setOpenAtmField={setOpenAtmField}\n                    setEnteredCard={setEnteredCard}\n                    pincode={pincode}\n                    setPincode={setPincode}\n                    checkPincode={checkPincode} />}\n\n            {openAtmField &&\n                <div className={classes.atmService}>\n                    <TextField\n                        autoFocus\n                        value={inputValue}\n                        className={classes.input}\n                        onChange={(e) => setInputValue(e.currentTarget.value)} />\n                    {tooltip && <div style={{ display: 'flex', width: 250, justifyContent: 'center' }}>\n                        <Typography>{tooltip}</Typography>\n                    </div>}\n                    <ButtonGroup buttonConfig={buttonsConfig.filter(el => el.type === 'personal')} />\n                    <ButtonGroup buttonConfig={buttonsConfig.filter(el => el.type === 'all')} />\n                </div>}\n\n            {openAtmField && <Balances />}\n        </div>\n    );\n})\n","\nexport interface INotes {\n    type: number,\n    value?: number\n}\n\nexport type Operation = 'getFromAtm' | 'setToAtm' | 'setToAll' | 'getFromAll';\n\nexport const defaultPincode = '0000';","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import { App } from './App/index';\nimport { App } from 'src/components/pages'\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}